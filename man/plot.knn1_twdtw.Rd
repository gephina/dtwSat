% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_patterns.R
\name{plot.knn1_twdtw}
\alias{plot.knn1_twdtw}
\title{Plot Patterns from Time Series Data}
\usage{
\method{plot}{knn1_twdtw}(x, n = 12, ...)
}
\arguments{
\item{x}{A model of class \code{"knn1_twdtw"}.}

\item{n}{An integer specifying the number of patterns to plot. Default is 12.}

\item{...}{Additional arguments. Currently not used.}
}
\value{
A \code{\link[ggplot2]{ggplot}} object displaying the time series patterns.
}
\description{
This function visualizes time series data patterns from the \code{"knn1_twdtw"} model.
It produces a multi-faceted plot,
where each facet represents a different time series pattern from the model's data.
Within each facet, different attributes (e.g., bands or indices) are plotted as
distinct lines, differentiated by color.
}
\details{
The function is designed for visual inspection of time series patterns from the model.
Each data frame in the model's data represents a time series. Columns within the data frame
correspond to different attributes (e.g., bands or indices), while rows represent time points.
The facet title is derived from the name of each time series in the model's data.
}
\examples{
\dontrun{
# Read training samples
samples <-
  system.file("mato_grosso_brazil/samples.gpkg", package = "dtwSat") |>
  st_read(quiet = TRUE)

# Get satellite image time sereis files
tif_files <- system.file("mato_grosso_brazil", package = "dtwSat") |>
  dir(pattern = "\\\\.tif$", full.names = TRUE)

# Get acquisition dates
acquisition_date <- regmatches(tif_files, regexpr("[0-9]{8}", tif_files)) |>
  as.Date(format = "\%Y\%m\%d")

# Create a 2D datacube
dc <- read_stars(tif_files,
                 proxy = FALSE,
                 along = list(time = acquisition_date),
                 RasterIO = list(bands = 1:6)) |>
      st_set_dimensions(3, c("EVI", "NDVI", "RED", "BLUE", "NIR", "MIR")) |>
      split(c("band")) |>
      split(c("time"))

# Create a knn1-twdtw model
m <- knn1_twdtw(x = dc,
                y = samples,
                formula = band ~ s(time))

# Visualize model patterns
plot(m)

# Classify satellite images
system.time(
  lu <- predict(dc,
                model = m,
                drop_dimensions = TRUE,
                cycle_length = 'year',
                time_scale = 'day',
                time_weight = c(steepness = 0.1, midpoint = 50))
)
}
}
\seealso{
knn1_twdtw
}
